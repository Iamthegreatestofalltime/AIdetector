import streamlit as st
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.tokenize import sent_tokenize, word_tokenize

nltk.download('punkt')
# Load GPT-2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

def calculate_perplexity(text):
    try:
        encoded_input = tokenizer.encode(text, add_special_tokens=False, return_tensors='pt')
        input_ids = encoded_input[0]
        if input_ids.max() >= model.config.vocab_size:
            print("Warning: Token ID exceeds the model's vocabulary size.")
            return float('inf')
        with torch.no_grad():
            outputs = model(input_ids)
            logits = outputs.logits
        perplexity = torch.exp(torch.nn.functional.cross_entropy(logits.view(-1, logits.size(-1)), input_ids.view(-1)))
        return perplexity.item()
    except Exception as e:
        print(f"Error calculating perplexity: {e}")
        return float('inf')

def highlight_text(text):
    sentences = sent_tokenize(text)
    highlighted_text = ""
    total_words = 0
    ai_words = 0
    for sentence in sentences:
        words_in_sentence = word_tokenize(sentence)
        total_words += len(words_in_sentence)
        sentence_perplexity = calculate_perplexity(sentence)
        if sentence_perplexity > 30000:  # Adjust this threshold based on your analysis
            highlighted_text += f"<span style='background-color: #ffcccb;'>{sentence}</span> "
            ai_words += len(words_in_sentence)
        else:
            highlighted_text += sentence + " "
    ai_percentage = (ai_words / total_words) * 100 if total_words > 0 else 0
    return highlighted_text, ai_percentage

st.set_page_config(layout="wide")
st.title("GPT Shield: AI Plagiarism Detector")
text_area = st.text_area("Enter text", "")

if text_area:
    if st.button("Analyze"):
        col1, col2 = st.columns(2)

        with col1:
            st.info("Your Input Text")
            highlighted_text, ai_percentage = highlight_text(text_area)
            st.markdown(highlighted_text, unsafe_allow_html=True)

        with col2:
            st.info("Analysis Results")
            overall_perplexity = calculate_perplexity(text_area)
            st.write("Overall Perplexity:", overall_perplexity)
            st.write(f"Percentage Likely AI-Generated: {ai_percentage:.2f}%")
            if overall_perplexity > 35000:
                st.error("Text Analysis Result: AI generated content")
            elif overall_perplexity > 30000:
                st.error("Text Analysis Result: Possibly AI generated content")
            else:
                st.success("Text Analysis Result: Likely not generated by AI")
